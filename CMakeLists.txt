cmake_minimum_required(VERSION 2.8)
set(RADIX_LIBRARY RadixEngine)

if(NOT DEFINED CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "Build type")
endif()

project(${RADIX_LIBRARY} CXX C)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

#### PLATFORM-SPECIFIC FIXES ####

if(DEFINED WIN32)
  add_definitions("-D_USE_MATH_DEFINES")
endif()

#### LIBRARIES ####

set(RADIX_INCLUDE_DIRS "")

set (CMAKE_CXX_STANDARD_REQUIRED ON)
set (CMAKE_CXX_STANDARD 17)
set (CMAKE_CXX_FLAGS " -DNOMINMAX --std=c++1z ${CMAKE_CXX_FLAGS}")
#find_package(CXX14 REQUIRED)
#set(CMAKE_CXX_FLAGS "${CXX14_FLAGS} ${CMAKE_CXX_FLAGS}")

find_package(OpenGL REQUIRED)
list(APPEND RADIX_INCLUDE_DIRS ${OPENGL_INCLUDE_DIR})

set(RADIX_LIBRARIES ${OPENGL_gl_LIBRARY})

find_package(PkgConfig REQUIRED)
#pkg_search_module(EPOXY REQUIRED epoxy)
#list(APPEND RADIX_INCLUDE_DIRS ${EPOXY_INCLUDE_DIRS})
#list(APPEND RADIX_LIBRARIES ${EPOXY_LIBRARIES} )

find_package(Assimp REQUIRED)
list(APPEND RADIX_INCLUDE_DIRS ${ASSIMP_INCLUDE_DIRS})
list(APPEND RADIX_LIBRARIES ${ASSIMP_LIBRARIES} )

find_package(SDL2 REQUIRED)
find_package(SDL2_mixer REQUIRED)
list(APPEND RADIX_INCLUDE_DIRS ${SDL2_INCLUDE_DIR} ${SDL2_MIXER_INCLUDE_DIRS})
list(APPEND RADIX_LIBRARIES ${SDL2_LIBRARY} ${SDL2_MIXER_LIBRARIES} )

find_package(TinyXML2 REQUIRED)
list(APPEND RADIX_INCLUDE_DIRS ${TINYXML2_INCLUDE_DIR})
list(APPEND RADIX_LIBRARIES ${TINYXML2_LIBRARIES} )

find_package(json11 REQUIRED)
list(APPEND RADIX_INCLUDE_DIRS ${JSON11_INCLUDE_DIR})
list(APPEND RADIX_LIBRARIES ${JSON11_LIBRARY})

find_package(GWEN REQUIRED)
list(APPEND RADIX_INCLUDE_DIRS ${GWEN_INCLUDE_DIR})
list(APPEND RADIX_LIBRARIES ${GWEN_LIBRARY})

find_package(Bullet 2.82 REQUIRED)
list(APPEND RADIX_INCLUDE_DIRS ${BULLET_INCLUDE_DIR})
list(APPEND RADIX_LIBRARIES ${BULLET_LIBRARIES})

find_package(VHACD REQUIRED)
list(APPEND RADIX_INCLUDE_DIRS ${VHACD_INCLUDE_DIR})
list(APPEND RADIX_LIBRARIES ${VHACD_LIBRARY})

find_package(FreeImage REQUIRED)
list(APPEND RADIX_INCLUDE_DIRS ${FREEIMAGE_INCLUDE_DIR})
list(APPEND RADIX_LIBRARIES ${FREEIMAGE_LIBRARIES})

set(PORTAL_TEST_LIBRARIES ${RADIX_LIBRARIES})

list(APPEND RADIX_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/serine/include")

#### ENGINE ####

if (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
  add_definitions("-Wall")
endif ()

set(RADIX_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/include")
list(APPEND RADIX_INCLUDE_DIRS "${RADIX_INCLUDE_DIR}")

include_directories(${RADIX_INCLUDE_DIRS})

add_subdirectory(source)

add_library(${RADIX_LIBRARY} ${RADIX_SOURCES})
target_link_libraries(${RADIX_LIBRARY} ${RADIX_LIBRARIES})

# Export
list(APPEND RADIX_LIBRARIES ${RADIX_LIBRARY})

if (RADIX_EXPORT_CMAKE_PACKAGE_VARS)
  set(RADIX_LIBRARY "${RADIX_LIBRARY}" PARENT_SCOPE)
  set(RADIX_LIBRARIES "${RADIX_LIBRARIES}" PARENT_SCOPE)
  set(RADIX_INCLUDE_DIR "${RADIX_INCLUDE_DIR}" PARENT_SCOPE)
  set(RADIX_INCLUDE_DIRS "${RADIX_INCLUDE_DIRS}" PARENT_SCOPE)
endif ()

#### UNIT TESTING ####

find_package(UnitTestPlusPlus)
if (UnitTestPlusPlus_FOUND)
  include_directories(${RADIX_INCLUDE_DIRS} ${UnitTestPlusPlus_INCLUDE_DIRS})
  enable_testing()
  add_subdirectory(tests)
endif ()

if (CMAKE_VERSION VERSION_GREATER 2.8.5)
  include(FeatureSummary)
  feature_summary(WHAT ALL)
endif ()
